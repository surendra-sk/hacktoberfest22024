public class FloydWarshall {
    final static int INF = 99999, V = 4;

    // Function to implement Floyd-Warshall algorithm
    void floydWarshall(int graph[][]) {
        int dist[][] = new int[V][V];

        // Initialize the distance array with the input graph
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                dist[i][j] = graph[i][j];
            }
        }

        // Update the distance array considering every vertex as an intermediate vertex
        for (int k = 0; k < V; k++) {
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }

        // Print the final shortest distance matrix
        printSolution(dist);
    }

    // Function to print the solution matrix
    void printSolution(int dist[][]) {
        System.out.println("Shortest distances between every pair of vertices:");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(dist[i][j] + "   ");
                }
            }
            System.out.println();
        }
    }

    // Driver code to test the Floyd-Warshall algorithm
    public static void main(String[] args) {
        FloydWarshall fw = new FloydWarshall();

        // Example graph represented as an adjacency matrix
        int graph[][] = { 
            { 0, 3, INF, 7 }, 
            { 8, 0, 2, INF }, 
            { 5, INF, 0, 1 }, 
            { 2, INF, INF, 0 } 
        };

        // Run Floyd-Warshall algorithm on the given graph
        fw.floydWarshall(graph);
    }
}
